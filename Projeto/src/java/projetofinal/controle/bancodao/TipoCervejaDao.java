/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projetofinal.controle.bancodao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import projetofinal.controle.conexaobanco.Conectar;
import projetofinal.modelo.TipoCerveja;

/**
 * Classe para controle de entra e saida de dados do banco
 * da tabela TipoCeveja
 * 
 * campos:
 *  codigo_tipo INTEGER  generated by default as identity (start with 1) NOT NULL PRIMARY KEY,
 *  nome_tipo varchar(50) NOT NULL
 * 
 * 
 * @author Cássio, Leandro
 */
public class TipoCervejaDao {
    
    /**
     * Método para inserir dados
     * 
     * @param tipoCerveja - objeto
     * @return  1 - gravado com sucesso 0- erro
     */
    public int insert(TipoCerveja tipoCerveja) {
        Connection conn = null;
        PreparedStatement ps = null;
        int result;
        try {
            conn = Conectar.conectar();
            String sql = "insert into tipocerveja (nome_tipo) values(?)";
            ps = conn.prepareStatement(sql);
            ps.setString(1, tipoCerveja.getNome());
            result = ps.executeUpdate();
        } catch (SQLException e) {
            System.out.println("ERRO: " + e.getMessage());
            if (conn != null) {
                try {
                    conn.rollback();
                } catch (SQLException ex) {
                    System.out.println("ERRO: " + ex.getMessage());
                }
            }
            result = 0;
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    System.out.println("ERRO: " + ex.getMessage());
                }
            }
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException ex) {
                    System.out.println("ERRO: " + ex.getMessage());
                }
            }
        }
        return result;
    }
    
    /**
     * Métod para update do tipo conforme
     * 
     * @param tipoCerveja - objeto
     * @return 0-erro ao efetuar gravação 1-Gravado com sucesso 
     */
    public int update(TipoCerveja tipoCerveja) {
        Connection conn = null;
        PreparedStatement ps = null;
        int result = 0;
        try {//
            conn = Conectar.conectar();
            String sql;
            sql = "update tipoCerveja set nome_tipo = ? where codigo_tipo = ?";
            ps = conn.prepareStatement(sql);
            ps.setString(1, tipoCerveja.getNome());
            ps.setInt(2, tipoCerveja.getCodigo());
            result = ps.executeUpdate();            
        } catch (SQLException e) {
            System.out.println("ERRO: " + e.getMessage());

            if (conn != null) {
                try {
                    conn.rollback();
                } catch (SQLException ex) {
                    System.out.println("ERRO: " + ex.getMessage());
                }
            }
            result = 0;
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    System.out.println("ERRO: " + ex.getMessage());
                }
            }
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException ex) {
                    System.out.println("ERRO: " + ex.getMessage());
                }
            }
        }        
        return result;
    }
        
    /***
     *Método pegar um registro na tabela 
     * 
     * @param codigo - código do tipo de cerveja a ser buscado
     * @return retorn um objeto tipo cerveja
     */
    public TipoCerveja getTipoCerveja(int codigo) {
        Connection conn = null;
        PreparedStatement ps = null;
        TipoCerveja tipoCerveja = null;
        try {
            conn = Conectar.conectar();
            String sql = "select codigo_tipo, nome_tipo from tipocerveja where codigo_tipo = ?";
            ps = conn.prepareStatement(sql);
            ps.setInt(1, codigo);

            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String nome = rs.getString(2);
               
                tipoCerveja = new TipoCerveja();
                tipoCerveja.setCodigo(codigo);
                tipoCerveja.setNome(nome);
            }
            
        } catch (SQLException e) {
            System.out.println("ERRO: " + e.getMessage());
            tipoCerveja = null;
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    System.out.println("ERRO: " + ex.getMessage());
                }
            }
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException ex) {
                    System.out.println("ERRO: " + ex.getMessage());
                }
            }
        }
        return tipoCerveja;
    }
    
    /**
     * Método para pegar último codigo cadastrado
     * 
     * @return retorna o último codigo cadastrado
     */
    public int getMaxCodigo() {
        Connection conn = null;
        PreparedStatement ps = null;
        int codigo = 0;
        try {
            conn = Conectar.conectar();
            String sql = "select max(codigo_tipo) from tipocerveja ";
            ps = conn.prepareStatement(sql);
            

            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                codigo = rs.getInt(1);
            }
            
        } catch (SQLException e) {
            System.out.println("ERRO: " + e.getMessage());
            codigo = -1;
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    System.out.println("ERRO: " + ex.getMessage());
                }
            }
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException ex) {
                    System.out.println("ERRO: " + ex.getMessage());
                }
            }
        }
        return codigo;
    }
    
    /***
     * Método para pegar todos os registro da tabela
     * 
     * @return ArrayList TipoCerveja
     */
    public ArrayList<TipoCerveja> getAll() {
        ArrayList<TipoCerveja> lista = new ArrayList();
        Connection conn = null;
        PreparedStatement ps = null;
        try {
            conn = Conectar.conectar();
            String sql = "select codigo_tipo, nome_tipo from tipocerveja";
            ps = conn.prepareStatement(sql);

            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Integer codigo = rs.getInt(1);
                String nome = rs.getString(2);
                                                
                TipoCerveja tipoCerveja = new TipoCerveja();
                tipoCerveja.setCodigo(codigo);
                tipoCerveja.setNome(nome);
                lista.add(tipoCerveja);
            }
        } catch (SQLException e) {
            System.out.println("ERRO: " + e.getMessage());
            lista = null;
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    System.out.println("ERRO: " + ex.getMessage());
                }
            }
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException ex) {
                    System.out.println("ERRO: " + ex.getMessage());
                }
            }
        }
        return lista;
    } 
    
    
    /***
     * Método para pegar o tipo de cerveja conforme o mostrado;
     * 
     * @param consulta - texto a ser consultado
     * @return ArrayList TipoCerveja
     */
    public ArrayList<TipoCerveja> getTipoCerveja(String consulta) {
        ArrayList<TipoCerveja> lista = new ArrayList<>();
        Connection conn = null;
        PreparedStatement ps = null;
        try {
            conn = Conectar.conectar();
            String sql = "select codigo_tipo, nome_tipo from tipocerveja where upper(nome_tipo) like '%"+consulta.toUpperCase()+"%'";
            ps = conn.prepareStatement(sql);

            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Integer codigo = rs.getInt(1);
                String nome = rs.getString(2);
                                                
                TipoCerveja tipoCerveja = new TipoCerveja();
                tipoCerveja.setCodigo(codigo);
                tipoCerveja.setNome(nome);
                lista.add(tipoCerveja);
            }
        } catch (SQLException e) {
            System.out.println("ERRO: " + e.getMessage());
            lista = null;
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    System.out.println("ERRO: " + ex.getMessage());
                }
            }
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException ex) {
                    System.out.println("ERRO: " + ex.getMessage());
                }
            }
        }
        return lista;
    } 
    
    /***
     * Método para deletar tipo de cerveja
     * 
     * @param codigo - codigo do tipo a ser deletado
     * @return 
     */
    public boolean deletar(int codigo) {
        Connection conn = null;
        PreparedStatement ps = null;
        boolean result = true;
        try {
            conn = Conectar.conectar();
            String sql = "delete from tipocerveja where codigo_tipo = ?";
            ps = conn.prepareStatement(sql);
            ps.setInt(1, codigo);

            ps.executeUpdate();
            result = true;
        } catch (SQLException e) {
            System.out.println("ERRO: " + e.getMessage());
            result = false;            
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    System.out.println("ERRO: " + ex.getMessage());
                }
            }
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException ex) {
                    System.out.println("ERRO: " + ex.getMessage());
                }
            }
        }
        return result;
    }
}
